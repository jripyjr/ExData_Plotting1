B = array(seq(0.1,2.0, by=0.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"myhdf5file.h5","foo/B")
C = matrix(paste(LETTERS[1:10],LETTERS[11:20], collapse=""), nr=2,nc=5)
h5write(C,"myhdf5file.h5","foo/C")
df = data.frame(1L:5L, seq(0,1,length.out=5), c("ab","cde","fghi","a","s"),stringsAsFactors=FALSE)
h5write(df,"myhdf5file.h5","foo/df")
h5ls("myhdf5file.h5")
cls
clear
ls
uCon = url("http://scholar.google.com/citations?user=RcEmiPoAAAAJ&hl=en")
htmlCode = readLines(uCon)
close(uCon)
htmlCode
uCon = url("http://scholar.google.com/citations?user=RcEmiPoAAAAJ&hl=en")
library(XML)
close(uCon)
url <- "http://scholar.google.com/citations?user=RcEmiPoAAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//a href", xmlValue)
xpathSApply(html, "//a", xmlValue)
library(httr)
html2 = GET(url)
content2 = content(html2, as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//a", xmlValue)
xpathSApply(parsedHtml, "//head", xmlValue)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(html, "//td[@id='cited-by]", xmlValue)
xpathSApply(html, "//td[@id='col-citedby]", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
xpathSApply(parsedHtml, "//td[@id='col-citedby']", xmlValue)
xpathSApply(parsedHtml, "//td[@class='gsc_a_c']", xmlValue)
install.packages("RSQLServer")
library(swirl)
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Mathematical Biostatistics Bootcamp")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("R Programming")
install_from_swirl("R Programming Alt")
install_from_swirl("Regression Models")
install_from_swirl("Statistical Inference")
library(dataset)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
par("lty")
par("col")
par("mar")
par("mfrow")
if(!file.exists('electric_power_consumption.csv')){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destFile <- "electric_power_consumption.zip"
download.file(fileURL, destfile = destFile)
unzip(destFile)
rm(destFile)
}
file.remove(destFile)
destFile <- "electric_power_consumption.zip"
file.remove(destFile)
unzip(destFile, list=FALSE)
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destFile <- "electric_power_consumption.zip"
download.file(fileURL, destfile = destFile)
unzip(destFile, list=FALSE)
unzip(destFile, list=TRUE)
fileName <- unzip(destFile, list=TRUE)
fileName <- fileName$Name
file.remove(destFile)
# Read data into a data frame, set the classes of the columns
dfEPC <- read.table(fileName,
header=TRUE,
colClasses=c(rep('character', 2),
rep('numeric',7)
)
)
dfEPC <- read.table(fileName,
header=TRUE,
sep=';',
na.strings='?',
colClasses=c(rep('character', 2),
rep('numeric',7)
)
)
# Delete the zip
if(!file.exists('electric_power_consumption.csv')){
# Download data
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
destFile <- "electric_power_consumption.zip"
download.file(fileURL,
destfile = destFile
)
# Get the name of the file in the zip
fileName <- unzip(destFile,
list=TRUE
)
fileName <- fileName$Name
# Unzip the file
unzip(destFile)
# Delete the zip
file.remove(destFile)
# Read data into a data frame, set the classes of the columns
dfEPC <- read.table(fileName,
header=TRUE,
sep=';',
na.strings='?',
colClasses=c(rep('character', 2),
rep('numeric',7)
)
)
}
getws
getwd()
setwd("C:/Workspace/exdata")
getwd()
source("get_clean_data.r")
source("C:\Users\John\Documents\GitHub\ExData_Plotting1\get_clean_data.r")
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
dfEPC$DateTime <- paste(dfEPC$Date, dfEPC$Time, sep" ")
dfEPC$DateTime <- paste(dfEPC$Date, dfEPC$Time, sep=" ")
dfEPC$DateTime <- strptime(dfEPC$DateTime, "%d/%m/%Y %H:%M:%S")
head(dfEPC)
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
head(dfEPC)
year <- dfEPC$DateTime$year
month <- dfEPC$DateTime$mon
month <- day(dfEPC$DateTime)
day <- dfEPC$DateTime$day
month <- dfEPC$DateTime$month
head(dfEPC)
year <- dfEPC$DateTime$year
month <- dfEPC$DateTime$mon
day <- dfEPC$DateTime$day
day <- dfEPC$DateTime$date
day <- dfEPC$DateTime$d
day <- dfEPC$DateTime$mday
dfEPC <- subset(dfEPC,
dfEPC$DateTime$year == 107 &
dfEPC$DateTime$mon == 2 &
(dfEPC$DateTime$mday == 1 | dfEPC$DateTime$mday == 2)
)
head(dfEPC)
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
head(dfEPC)
View(dfEPC)
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
View(dfEPC)
classes(dfEPC)
class(dfEPC)
colclasses(dfEPC)
sapply(dfEPC, class)
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
sapply(dfEPC, class)
View(dfEPC)
sapply(dfEPC, class)
dfEPC <- read.csv("electric_power_consumption.csv",
colClasses=c(rep('character', 2),
rep('numeric',7),
'date'
)
)
dfEPC <- read.csv("electric_power_consumption.csv",
colClasses=c(rep('character', 2),
rep('numeric',7),
'character'
)
)
dfEPC$DateTime <- strptime(dfEPC$DateTime,
"%d/%m/%Y %H:%M:%S"
)
sapply(dfEPC, class)
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
sapply(dfEPC, class)
source("C:/Users/John/Documents/GitHub/ExData_Plotting1/get_clean_data.r")
sapply(dfEPC, class)
getwd()
setwd("~/GitHub/ExData_Plotting1")
source("/scripts/get_clean_data.r")
source("scripts/get_clean_data.r")
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source('scripts/get_clean_data.r')
# Create device png
png(filename='plots/plot1.png')
# Create plot
hist(dfEPC$Global_active_power,
main='Global Active Power',
xlab='Global Active Power (kilowatts)',
col='red')
# Roger says turn off the device
dev.off()
main='Global Active Power',
png(filename="plots/plot1.png",
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot1.png",
width=480,
height=480
)
# Create plot
hist(dfEPC$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# Roger says turn off the device
dev.off()
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot1.png",
width=480,
height=480
)
# Create plot
hist(dfEPC$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# Roger says turn off the device
dev.off()
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot1.png",
width=480,
height=480
)
# Create plot
hist(dfEPC$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# Roger says turn off the device
dev.off()
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot1.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
hist(dfEPC$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# Roger says turn off the device
dev.off()
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot1.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
hist(dfEPC$Global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# Roger says turn off the device
dev.off()
# Create plot2
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot2.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
plot(dfEPC$DateTime,
dfEPC$Global_active_power,
ylab='Global Active Power (kilowatts)',
xlab='',
type='l')
# Roger says turn off the device
dev.off()
# Create plot2
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot2.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
plot(dfEPC$DateTime,
dfEPC$Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l")
# Roger says turn off the device
dev.off()
plot(dfEPC$DateTime,
dfEPC$Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l")
View(dfEPC)
# Load data from the cleaned file
dfEPC <- read.csv("electric_power_consumption.csv",
colClasses=c(rep('character', 2),
rep('numeric',7),
'character'
)
)
View(dfEPC)
# Make sure the DateTime is really DateTime
dfEPC$DateTime <- strptime(dfEPC$DateTime,
"%Y-%m-%dY %H:%M:%S"
)
View(dfEPC)
dfEPC <- read.csv("electric_power_consumption.csv",
colClasses=c(rep('character', 2),
rep('numeric',7),
'character'
)
)
dfEPC$DateTime <- strptime(dfEPC$DateTime,
"%Y-%m-%d %H:%M:%S"
)
View(dfEPC)
# Create plot2
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot2.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
plot(dfEPC$DateTime,
dfEPC$Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l")
# Roger says turn off the device
dev.off()
# Create plot3
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot2.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
plot(dfEPC$DateTime,
dfEPC$Sub_metering_1,
type="l",
xlab="",
ylab="Energy sub metering")
lines(dfEPC$DateTime,
dfEPC$Sub_metering_2,
col="red")
lines(dfEPC$DateTime,
dfEPC$Sub_metering_3,
col="blue")
legend("topright",
legend=c("Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3"),
col=c("black", "red", "blue"),
lty="solid")
# Roger says turn off the device
dev.off()
# Create plot3
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot3.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
plot(dfEPC$DateTime,
dfEPC$Sub_metering_1,
type="l",
xlab="",
ylab="Energy sub metering")
lines(dfEPC$DateTime,
dfEPC$Sub_metering_2,
col="red")
lines(dfEPC$DateTime,
dfEPC$Sub_metering_3,
col="blue")
legend("topright",
legend=c("Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3"),
col=c("black", "red", "blue"),
lty="solid")
# Roger says turn off the device
dev.off()
# Create plot2
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot2.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
plot(dfEPC$DateTime,
dfEPC$Global_active_power,
ylab="Global Active Power (kilowatts)",
xlab="",
type="l")
# Roger says turn off the device
dev.off()
# Create plot4
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
# Create device png
png(filename="plots/plot4.png",
width=480,
height=480,
bg="transparent"
)
# Create plot
# Make quads
par(mfrow=c(2,2))
# Top left
plot(dfEPC$DateTime,
dfEPC$Global_active_power,
ylab="Global Active Power",
xlab="",
type="l"
)
# Top right
plot(dfEPC$DateTime,
dfEPC$Voltage,
xlab="datetime",
ylab="Voltage",
type="l"
)
# Bottom left
plot(dfEPC$DateTime,
dfEPC$Sub_metering_1,
type="l",
xlab="",
ylab="Energy sub metering"
)
lines(dfEPC$DateTime,
dfEPC$Sub_metering_2,
col="red"
)
lines(dfEPC$DateTime,
dfEPC$Sub_metering_3,
col="blue"
)
legend("topright",
legend=c("Sub_metering_1",
"Sub_metering_2",
"Sub_metering_3"
),
col=c("black",
"red",
"blue"),
lty="solid",
bty="n"
)
# Bottom right
plot(dfEPC$DateTime,
dfEPC$Global_reactive_power,
xlab="datetime",
ylab="Global_reactive_power",
type="l"
)
# Roger says turn off the device
dev.off()
# Create plot1
# Created by John Ripy on 2015/02/07
# Load data from cleaned file or download it if necessary
source("scripts/get_clean_data.r")
